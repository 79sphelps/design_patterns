
Note: Stars '*' indicate frequency of usage in JavaScript.

creational patterns:
- 1) [* * * / /] abstract factory	--> Creates an instance of several families of classes
- 2) [* / / / /] builder		    --> Separates object construction from its representation
- 3) [* * * * /] factory method		--> Creates an instance of several derived classes
- 4) [* * * * *] prototype		    --> A fully initialized instance to be copied or cloned
- 5) [* * * * *] singleton		    --> A class of which only a single instance can exist

structural patterns
- 1) [* * * * /] adapter		    --> Match interfaces of different classes
- 2) [* / / / /] bridge			    --> Separates an objectâ€™s interface from its implementation
- 3) [* * * * *] composite		    --> A tree structure of simple and composite objects
- 4) [* * * * /] decorator		    --> Add responsibilities to objects dynamically
- 5) [* * * * *] facade			    --> A single class that represents an entire subsystem
- 6) [* * * * *] flyweight		    --> A fine-grained instance used for efficient sharing
- 7) [* * * * /] proxy			    --> An object representing another object

behavioral patterns
- 1) [* * * / /] chain of resp.		--> A way of passing a request between a chain of objects
- 2) [* * * * *] command		    --> Encapsulate a command request as an object
- 3) [* / / / /] interpreter		--> A way to include language elements in a program
- 4) [* * * * *] iterator		    --> Sequentially access the elements of a collection
- 5) [* * / / /] mediator		    --> Defines simplified communication between classes
- 6) [* / / / /] memento		    --> Capture and restore an object's internal state
- 7) [* * * * *] observer		    --> A way of notifying change to a number of classes
- 8) [* * / / /] state			    --> Alter an object's behavior when its state changes
- 9) [* * * / /] strategy		    --> Encapsulates an algorithm inside a class
- 10)[* * / / /] template method	--> Defer the exact steps of an algorithm to a subclass
- 11)[* / / / /] visitor		    --> Defines a new operation to a class without change
